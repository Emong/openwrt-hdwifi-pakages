--- a/src/centralserver.c	2014-04-22 11:10:49.000000000 +0800
+++ b/src/centralserver.c	2014-08-16 15:49:25.549972825 +0800
@@ -51,6 +51,32 @@
 
 extern pthread_mutex_t	config_mutex;
 
+/** in connect function emong added,for quickly find useable server
+
+*/
+int in_connect_auth_server(t_auth_serv *server) {
+	int sockfd,level=0;
+	s_config *config = config_get_config();
+	t_auth_serv *tmp_server;
+	for (tmp_server = config->auth_servers; tmp_server; tmp_server = tmp_server->next) {
+		if(tmp_server == server)	//find it
+			break;
+		++level;
+	}
+	LOCK_CONFIG();
+	sockfd = _connect_auth_server(level);
+	UNLOCK_CONFIG();
+
+	if (sockfd == -1) {
+		debug(LOG_ERR, "Failed to connect to any of the auth servers");
+		mark_auth_offline();
+	}
+	else {
+		debug(LOG_DEBUG, "Connected to auth server");
+		mark_auth_online();
+	}
+	return (sockfd);
+}
 /** Initiates a transaction with the auth server, either to authenticate or to
  * update the traffic counters at the server
 @param authresponse Returns the information given by the central server 
@@ -79,7 +105,7 @@
 	/* Blanket default is error. */
 	authresponse->authcode = AUTH_ERROR;
 	
-	sockfd = connect_auth_server();
+	sockfd = in_connect_auth_server(auth_server);
 	if (sockfd == -1) {
 		/* Could not connect to any auth server */
 		return (AUTH_ERROR);
@@ -243,7 +269,13 @@
 	/*
 	 * Let's resolve the hostname of the top server to an IP address
 	 */
+	int auth_i = 1;
 	auth_server = config->auth_servers;
+	while(auth_i < level)
+	{
+		auth_server = auth_server->next;
+		++auth_i;
+	}
 	hostname = auth_server->authserv_hostname;
 	debug(LOG_DEBUG, "Level %d: Resolving auth server [%s]", level, hostname);
 	h_addr = wd_gethostbyname(hostname);
@@ -341,7 +373,10 @@
 			debug(LOG_ERR, "Level %d: Failed to create a new SOCK_STREAM socket: %s", strerror(errno));
 			return(-1);
 		}
-
+		struct timeval auth_server_timeout;
+		auth_server_timeout.tv_sec = 5;	//设置5秒
+		auth_server_timeout.tv_usec = 0;
+		setsockopt(sockfd, SOL_SOCKET, SO_SNDTIMEO, &auth_server_timeout, sizeof(auth_server_timeout));	//connect time out
 		if (connect(sockfd, (struct sockaddr *)&their_addr, sizeof(struct sockaddr)) == -1) {
 			/*
 			 * Failed to connect
@@ -357,6 +392,7 @@
 			 * We have successfully connected
 			 */
 			debug(LOG_DEBUG, "Level %d: Successfully connected to auth server %s:%d", level, hostname, auth_server->authserv_http_port);
+			auth_server->inuse = 1;
 			return sockfd;
 		}
 	}
--- a/src/conf.c	2014-08-16 15:04:21.000000000 +0800
+++ b/src/conf.c	2014-08-16 15:45:56.425984149 +0800
@@ -882,6 +882,11 @@
 {
 
 	/* This is as good as atomic */
+	t_auth_serv *auth_server = NULL;
+	for (auth_server = config.auth_servers; auth_server; auth_server = auth_server->next) {
+		if(auth_server -> inuse == 1)
+			return auth_server;
+	}
 	return config.auth_servers;
 }
 
@@ -892,19 +897,7 @@
 void
 mark_auth_server_bad(t_auth_serv *bad_server)
 {
-	t_auth_serv	*tmp;
-
-	if (config.auth_servers == bad_server && bad_server->next != NULL) {
-		/* Go to the last */
-		for (tmp = config.auth_servers; tmp->next != NULL; tmp = tmp->next);
-		/* Set bad server as last */
-		tmp->next = bad_server;
-		/* Remove bad server from start of list */
-		config.auth_servers = bad_server->next;
-		/* Set the next pointe to NULL in the last element */
-		bad_server->next = NULL;
-	}
-
+	bad_server->inuse = 0;
 }
 
 long ktime()
--- a/src/conf.h	2014-08-16 15:04:21.000000000 +0800
+++ b/src/conf.h	2014-08-16 15:02:07.000000000 +0800
@@ -87,6 +87,7 @@
 				     listens on */
     int authserv_use_ssl;	/**< @brief Use SSL or not */
     char *last_ip;	/**< @brief Last ip used by authserver */
+    int inuse;
     struct _auth_serv_t *next;
 } t_auth_serv;
 
--- a/src/ping_thread.c	2014-08-16 15:44:46.000000000 +0800
+++ b/src/ping_thread.c	2014-08-16 15:45:33.009985417 +0800
@@ -104,7 +104,7 @@
 	unsigned int      sys_memfree = 0;
 	float             sys_load    = 0;
 	t_auth_serv	*auth_server = NULL;
-	auth_server = get_auth_server();
+//	auth_server = get_auth_server();
 	
 	debug(LOG_DEBUG, "Entering ping()");
 	
@@ -120,7 +120,7 @@
 		 */
 		return;
 	}
-
+	auth_server = get_auth_server();
 	/*
 	 * Populate uptime, memfree and load
 	 */
