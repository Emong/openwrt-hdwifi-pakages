--- a/src/conf.c	2014-06-07 11:06:11.000000000 +0800
+++ b/src/conf.c	2014-06-07 11:12:20.134278825 +0800
@@ -36,6 +36,7 @@
 #include <string.h>
 #include <ctype.h>
 
+#include <sys/sysinfo.h>
 #include "common.h"
 #include "safe.h"
 #include "debug.h"
@@ -900,3 +901,10 @@
 	}
 
 }
+
+long ktime()
+{
+	struct sysinfo info;
+	sysinfo(&info);
+	return info.uptime;
+}
--- a/src/conf.h	2014-06-07 11:06:11.000000000 +0800
+++ b/src/conf.h	2014-06-07 11:12:37.170279256 +0800
@@ -196,6 +196,7 @@
 
 void parse_trusted_mac_list(const char *);
 
+long ktime();
 #define LOCK_CONFIG() do { \
 	debug(LOG_DEBUG, "Locking config"); \
 	pthread_mutex_lock(&config_mutex); \
--- a/src/gateway.c
+++ b/src/gateway.c
@@ -95,7 +95,6 @@
 	restartargv[i++] = safe_strdup("-x");
 	safe_asprintf(&(restartargv[i++]), "%d", getpid());
 }
-
 /* @internal
  * @brief During gateway restart, connects to the parent process via the internal socket
  * Downloads from it the active client list
@@ -370,11 +369,11 @@
     /* Set the time when wifidog started */
 	if (!started_time) {
 		debug(LOG_INFO, "Setting started_time");
-		started_time = time(NULL);
+		started_time = ktime();
 	}
 	else if (started_time < MINIMUM_STARTED_TIME) {
 		debug(LOG_WARNING, "Detected possible clock skew - re-setting started_time");
-		started_time = time(NULL);
+		started_time = ktime();
 	}
 
 	/* If we don't have the Gateway IP address, get it. Can't fail. */
--- a/src/ping_thread.c
+++ b/src/ping_thread.c
@@ -164,7 +164,7 @@
 			sys_uptime,
 			sys_memfree,
 			sys_load,
-			(long unsigned int)((long unsigned int)time(NULL) - (long unsigned int)started_time),
+			(long unsigned int)((long unsigned int)sys_uptime - (long unsigned int)started_time),
 			VERSION,
 			auth_server->authserv_hostname);
 
--- a/src/ping_thread.h
+++ b/src/ping_thread.h
@@ -27,7 +27,7 @@
 #ifndef _PING_THREAD_H_
 #define _PING_THREAD_H_
 
-#define MINIMUM_STARTED_TIME 1041379200 /* 2003-01-01 */
+#define MINIMUM_STARTED_TIME 0 /* 2003-01-01 */
 
 /** @brief Periodically checks on the auth server to see if it's alive. */
 void thread_ping(void *arg);
--- a/src/util.c
+++ b/src/util.c
@@ -439,7 +439,7 @@
 		snprintf(buffer, (sizeof(buffer) - len), "WiFiDog status\n\n");
 		len = strlen(buffer);
 
-		uptime = time(NULL) - started_time;
+		uptime = ktime() - started_time;
 		days    = uptime / (24 * 60 * 60);
 		uptime -= days * (24 * 60 * 60);
 		hours   = uptime / (60 * 60);
